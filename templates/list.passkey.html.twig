{% extends "base.html.twig" %}

{% block title %}
    Jelkulcsaim - Webmenza
{% endblock title %}

{% block headtitle %}
    Jelkulcsaim
{% endblock headtitle %}

{% block script %}
<script src="https://unpkg.com/@simplewebauthn/browser/dist/bundle/index.umd.min.js"></script>
{% endblock script %}

{% block content %}
<button class="btn btn-primary" id="createpasskeybutton" onclick="register()"><i class="bi bi-plus-lg"></i> Létrehozás</button>
<p id="success"></p>
<p id="error"></p>
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Név</th>
                    <th>Műveletek</th>
                </tr>
            </thead>
            <tbody>
                {% for key in keys %}
                <tr>
                    <td>{{ key.name|escape }}</td>
                    <td><a href="delete.passkey.php?id={{ key.id|e }}" class="btn btn-danger" role="button"><i class="bi bi-trash3"></i> Törlés</a></td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    <script>
        const { startRegistration } = SimpleWebAuthnBrowser;
      
        // <button>
        const elemBegin = document.getElementById('createpasskeybutton');
        // <span>/<p>/etc...
        const elemSuccess = document.getElementById('success');
        // <span>/<p>/etc...
        const elemError = document.getElementById('error');
      
        // Start registration when the user clicks a button
        elemBegin.addEventListener('click', async () => {
          // Reset success/error messages
          elemSuccess.innerHTML = '';
          elemError.innerHTML = '';
      
          // GET registration options from the endpoint that calls
          // @simplewebauthn/server -> generateRegistrationOptions()
          const resp = await fetch('/register.passkey.php?stage=0');
          const optionsJSON = await resp.json();
      
          let attResp;
          try {
            // Pass the options to the authenticator and wait for a response
            attResp = await startRegistration({ optionsJSON });
          } catch (error) {
            // Some basic error handling
            if (error.name === 'InvalidStateError') {
              elemError.innerText = 'Error: Authenticator was probably already registered by user';
            } else {
              elemError.innerText = error;
            }
      
            throw error;
          }
      
          // POST the response to the endpoint that calls
          // @simplewebauthn/server -> verifyRegistrationResponse()
          const verificationResp = await fetch('/register.passkey.php?stage=1', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(attResp),
          });
      
          // Wait for the results of verification
          const verificationJSON = await verificationResp.json();
      
          // Show UI appropriate for the `verified` status
          if (verificationJSON && verificationJSON.verified) {
            elemSuccess.innerHTML = 'Success!';
          } else {
            elemError.innerHTML = `Oh no, something went wrong! Response: <pre>${JSON.stringify(
              verificationJSON,
            )}</pre>`;
          }
        });
      </script>
      
{% endblock content %}