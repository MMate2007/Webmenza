{% extends "base.html.twig" %}

{% block title %}
    Jelkulcsaim - Webmenza
{% endblock title %}

{% block headtitle %}
    Jelkulcsaim
{% endblock headtitle %}

{% block content %}
<button class="btn btn-primary" id="createpasskeybutton" onclick="createRegistration()"><i class="bi bi-plus-lg"></i> Létrehozás</button>
<p id="success"></p>
<p id="error"></p>
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Név</th>
                    <th>Műveletek</th>
                </tr>
            </thead>
            <tbody>
                {% for key in keys %}
                <tr>
                    <td>{{ key.name|escape }}</td>
                    <td><a href="delete.passkey.php?id={{ key.id|e }}" class="btn btn-danger" role="button"><i class="bi bi-trash3"></i> Törlés</a></td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    <script>
      if (!window.PublicKeyCredential &&  
    !PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable) {
      document.querySelector("#createpasskeybutton").style.display = "none";
    }
      async function createRegistration() {
        try {

            if (!window.fetch || !navigator.credentials || !navigator.credentials.create) {
                throw new Error('Browser not supported.');
            }

            let rep = await window.fetch('register.passkey.php?stage=0', {method:'GET', cache:'no-cache'});
            const createArgs = await rep.json();

            if (createArgs.success === false) {
                throw new Error(createArgs.msg || 'unknown error occured');
            }

            recursiveBase64StrToArrayBuffer(createArgs);

            const cred = await navigator.credentials.create(createArgs);

            const authenticatorAttestationResponse = {
                transports: cred.response.getTransports  ? cred.response.getTransports() : null,
                clientDataJSON: cred.response.clientDataJSON  ? arrayBufferToBase64(cred.response.clientDataJSON) : null,
                attestationObject: cred.response.attestationObject ? arrayBufferToBase64(cred.response.attestationObject) : null
            };

            rep = await window.fetch('register.passkey.php?stage=1', {
                method  : 'POST',
                body    : JSON.stringify(authenticatorAttestationResponse),
                cache   : 'no-cache'
            });
            const authenticatorAttestationServerResponse = await rep.json();

            if (authenticatorAttestationServerResponse.success) {
                window.location.reload();
            } else {
                throw new Error(authenticatorAttestationServerResponse.msg);
            }

        } catch (err) {
            console.log(err);

            if (err.message == "An attempt was made to use an object that is not, or is no longer, usable") {
              alert("A jelkulcs már létezik! Nincs más teendő, mint használni.");
            } else {
            window.alert(err.message || 'Ismeretlen hiba történt!'); }
        }
    }
      function recursiveBase64StrToArrayBuffer(obj) {
        let prefix = '=?BINARY?B?';
        let suffix = '?=';
        if (typeof obj === 'object') {
            for (let key in obj) {
                if (typeof obj[key] === 'string') {
                    let str = obj[key];
                    if (str.substring(0, prefix.length) === prefix && str.substring(str.length - suffix.length) === suffix) {
                        str = str.substring(prefix.length, str.length - suffix.length);

                        let binary_string = window.atob(str);
                        let len = binary_string.length;
                        let bytes = new Uint8Array(len);
                        for (let i = 0; i < len; i++)        {
                            bytes[i] = binary_string.charCodeAt(i);
                        }
                        obj[key] = bytes.buffer;
                    }
                } else {
                    recursiveBase64StrToArrayBuffer(obj[key]);
                }
            }
        }
    }
      function arrayBufferToBase64(buffer) {
        let binary = '';
        let bytes = new Uint8Array(buffer);
        let len = bytes.byteLength;
        for (let i = 0; i < len; i++) {
            binary += String.fromCharCode( bytes[ i ] );
        }
        return window.btoa(binary);
    }
    </script>
      
{% endblock content %}